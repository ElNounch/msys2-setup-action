name: "Msys2"
description: "Prepare Msys2"
inputs:
  location:
    description: "MSys2 location"
    required: true
  install_generic:
    description: "Required base packages"
    default: ""
  install_msystem:
    description: "Required arch-specific packages"
    default: ""
  msystem:
    description: "Variant of the environment to set by default: MINGW32, MINGW64, UCRT64, CLANG32, CLANG64 or CLANGARM64"
    default: "UCRT64"
outputs:
  location:
    description: "Full path of MSys2 parent folder"
    value: ${{ steps.locate.outputs.location }}
  pkgTarget:
    description: ""
    value: "${{ steps.pktListHash.pkgTarget }}"
defaults:
  runs:
    steps:
      shell: "msys2 -f {0}"
runs:
  using: composite
  steps:
    - name: Inject local action folder to PATH
      shell: cmd
      run: echo ${GITHUB_ACTION_PATH}>>${GITHUB_PATH}
    - name: "Compute paths and parametets"
      id: locate
      shell: pwsh
      run: |
        "location=" + (Get-Item -Path "${{ inputs.location }}\" || New-Item -Path "${{ inputs.location }}" -ItemType Directory).FullName >> $env:GITHUB_OUTPUT
        @"
        MSYS2_CMD=${{ inputs.location }}\msys64\msys2_shell.cmd
        LOGINSHELL=bash
        MSYSTEM=${{ inputs.msystem }}
        MSYSCON=defterm
        CHERE_INVOKING=enabled_from_arguments
        MSYS2_NOSTART=yes
        "@ >> ${env:GITHUB_ENV}
    - name: "Compute hash of required packages names"
      id: pktListHash
      shell: pwsh 
      run: |
        "pkgTarget=$((Get-FileHash -Algorithm SHA1 -InputStream ([IO.MemoryStream]::new([byte[]][char[]]`"${{ inputs.install_generic }},${{ inputs.install_msystem }}` "))).Hash)" >> $env:GITHUB_OUTPUT
    - name: "Download self-extracting archive"
      shell: pwsh
      run: |
        Start-BitsTransfer "https://repo.msys2.org/distrib/msys2-x86_64-latest.sfx.exe" "${{ steps.locate.outputs.location }}\msys2-x86_64-latest.sfx.exe"
    - name: "Extract and do first launch"
      shell: pwsh
      run: |
        Start-Process -Wait "${{ steps.locate.outputs.location }}\msys2-x86_64-latest.sfx.exe" -ArgumentList '-y','-o"${{ steps.locate.outputs.location }}"'
        Remove-Item "${{ steps.locate.outputs.location }}\msys2-x86_64-latest.sfx.exe"
        Start-Process -NoNewWindow -Wait -FilePath ${{ steps.locate.outputs.msys2_shell_cmd }} -ArgumentList $( ${{ steps.locate.outputs.msys2_shell_args }},'-c','exit')
    - name: "Cache Pacman packages"
      uses: actions/cache@v3
      with:
        path: |
          "${{ steps.locate.outputs.location }}\msys64\var\cache\pacman\pkg"
        key: "pacman-${{ steps.pktListHash.outputs.pkgTarget }}"
        restore-keys: pacman-
    - name: "Update package database and core packages"
      shell: "msys2 -f {0}"
      run: pacman -Syuu --noconfirm
#      shell: pwsh
#      run: |
#        Start-Process -NoNewWindow -Wait -FilePath ${{ steps.locate.outputs.msys2_shell_cmd }} -ArgumentList $( ${{ steps.locate.outputs.msys2_shell_args }},'-c','"pacman -Syuu --noconfirm"')
#        Start-Process -NoNewWindow -Wait -FilePath ${{ steps.locate.outputs.msys2_shell_cmd }} -ArgumentList $( ${{ steps.locate.outputs.msys2_shell_args }},'-c','"pacman -Su --noconfirm"')
    - name: "Install additionnal packages"
      shell: "msys2 -f {0}"
#      shell: "dynamic_shell_action.cmd -f {0}"
      run: |
         source /etc/msystem
         [ -z "${{ inputs.install_generic }}" ] || (
           echo "${{ inputs.install_generic }}" | awk -v RS=" " -v ORS="\n" -- '' | xargs pacman -S --noconfirm
         )
         [ -z "${{ inputs.install_msystem }}" ] || (
           echo "${{ inputs.install_msystem }}" | awk -v prefix="$MINGW_PACKAGE_PREFIX" -v RS=" " -v ORS="\n" -- '{print prefix "-" $1}' | xargs pacman -S --noconfirm 
         )
